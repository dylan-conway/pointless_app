{
  "_args": [
    [
      {
        "raw": "electron-packager",
        "scope": null,
        "escapedName": "electron-packager",
        "name": "electron-packager",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\projects\\canvas_apps\\pointless_app"
    ]
  ],
  "_from": "electron-packager",
  "_hasShrinkwrap": false,
  "_id": "electron-packager@13.0.0",
  "_location": "/electron-packager",
  "_nodeVersion": "10.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/electron-packager_13.0.0_1543996725786_0.5115613819809774"
  },
  "_npmUser": {
    "name": "malept",
    "email": "nodejs.npm.nospam@lazymalevolence.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "graceful-fs": "4.1.15",
    "jsonfile": "4.0.0",
    "ms": "2.1.1",
    "universalify": "0.1.2"
  },
  "_requested": {
    "raw": "electron-packager",
    "scope": null,
    "escapedName": "electron-packager",
    "name": "electron-packager",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/electron-packager/-/electron-packager-13.0.0.tgz",
  "_shasum": "3c0212a5f128759fde1b5a41763381ca88310449",
  "_shrinkwrap": null,
  "_spec": "electron-packager",
  "_where": "C:\\projects\\canvas_apps\\pointless_app",
  "author": {
    "name": "max ogden"
  },
  "ava": {
    "timeout": "60s"
  },
  "bin": {
    "electron-packager": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/electron-userland/electron-packager/issues"
  },
  "dependencies": {
    "asar": "^0.14.0",
    "debug": "^4.0.1",
    "electron-download": "^4.1.1",
    "electron-notarize": "^0.0.5",
    "electron-osx-sign": "^0.4.11",
    "extract-zip": "^1.0.3",
    "fs-extra": "^7.0.0",
    "galactus": "^0.2.1",
    "get-package-info": "^1.0.0",
    "parse-author": "^2.0.0",
    "pify": "^4.0.0",
    "plist": "^3.0.0",
    "rcedit": "^1.0.0",
    "resolve": "^1.1.6",
    "sanitize-filename": "^1.6.0",
    "semver": "^5.3.0",
    "yargs-parser": "^11.0.0"
  },
  "description": "Customize and package your Electron app with OS-specific bundles (.app, .exe, etc.) via JS or CLI",
  "devDependencies": {
    "ava": "^0.25.0",
    "buffer-equal": "^1.0.0",
    "codecov": "^3.0.0",
    "eslint": "^5.5.0",
    "eslint-config-standard": "^12.0.0",
    "eslint-plugin-ava": "^5.1.1",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-node": "^8.0.0",
    "eslint-plugin-promise": "^4.0.1",
    "eslint-plugin-standard": "^4.0.0",
    "mz": "^2.6.0",
    "nyc": "^13.0.1",
    "pkg-up": "^2.0.0",
    "sinon": "^7.0.0",
    "tempy": "^0.2.1"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-Jr/G+5x4XJqkV4MJHGYiojYI5KGx/EEj+p35us1oaLZjKErt06irB+O4v+fe52E648k4Bz2Vp4wBpEtm4O23Xg==",
    "shasum": "3c0212a5f128759fde1b5a41763381ca88310449",
    "tarball": "https://registry.npmjs.org/electron-packager/-/electron-packager-13.0.0.tgz",
    "fileCount": 85,
    "unpackedSize": 504116,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcB4U2CRA9TVsSAnZWagAAwCcQAJP1tb3eDBkLF8F9JnSp\nLiA+xNwm/5wJEOoxfNv70qX7BNOmFhqxIIoBTTZjfDFoSIkbzkas9eWOKMOk\ncJxZrP71ls6nVIKTW5Ufe/XFVeLzH9myX+WC9Y2TDepfYhsxWUfTC5lFTJMq\npS2e5VSOg4+y1NsyNA7ziGVWik7RmbsIoLJNw0fXYWIAoO+3eS2AX0xwdNGl\nEgylP/L0zV4RmKmTYB0F/byrqVeq8o1kOqXv24Yf1ZTZWzdNUCguDOvqKidK\n3ZvuLJml5QgjCwYwihEKUXXcSydNLvwHoe1H/Lx//7iD3qHulhD7GCnNVXLE\nqICI8pog+m1BRNVIwN/TaBMf5oKsLhybWb+e1s8cPAtftOu1yXjSC7TIpzx4\nfXEF80kQqchpPxweh+JK5dyZT8sE5tE9ny2F72Jz57VjYTVV5O3itliqqIME\n91/imHfUSP9ewYNhrEbYkgLCJALVHfLuUnK5tNIwCjeFab186aQ011W6yPIn\nAdXsSjCvHWzmRFnNkxrKdq4mYrKDH2VC0e7ZAQdfLIJ5dONhBaDhr2leHQ7+\nkk6wS0Vfcw5Lm4+l+Xj+E7pHnsfQX5LYNNFYeV3f+76b+tamwX6tKK6xCOFG\n5bErakb7S5wao3fP3U0pDkLjJT6IFy9CQUoUs5BWOlcHI6RmhQvlD34HL1Ws\n37Kw\r\n=NkyN\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.0"
  },
  "eslintConfig": {
    "extends": [
      "eslint:recommended",
      "plugin:ava/recommended",
      "plugin:import/errors",
      "plugin:import/warnings",
      "plugin:promise/recommended",
      "standard"
    ],
    "parserOptions": {
      "sourceType": "script"
    },
    "plugins": [
      "ava",
      "promise"
    ],
    "rules": {
      "indent": [
        "error",
        2,
        {
          "CallExpression": {
            "arguments": "first"
          },
          "SwitchCase": 1
        }
      ],
      "ava/prefer-async-await": 0,
      "no-console": 0,
      "strict": "error"
    }
  },
  "gitHead": "5e8526acb15dac648eeecd2fd12857b578244029",
  "homepage": "https://github.com/electron-userland/electron-packager",
  "keywords": [],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    },
    {
      "name": "jlord",
      "email": "to.jlord@gmail.com"
    },
    {
      "name": "kfranqueiro",
      "email": "kenneth.franqueiro@gmail.com"
    },
    {
      "name": "malept",
      "email": "nodejs.npm.nospam@lazymalevolence.com"
    },
    {
      "name": "marshallofsound",
      "email": "samuel.r.attard@gmail.com"
    },
    {
      "name": "sethlu",
      "email": "sethlu@me.com"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    },
    {
      "name": "stefanbuck",
      "email": "github@stefanbuck.com"
    },
    {
      "name": "zeke",
      "email": "zeke@sikelianos.com"
    }
  ],
  "name": "electron-packager",
  "optionalDependencies": {},
  "readme": "# Electron Packager\n\nPackage your [Electron](http://electron.atom.io) app into OS-specific bundles (`.app`, `.exe`, etc.) via JavaScript or the command line.\n\n[![Travis CI Build Status](https://travis-ci.org/electron-userland/electron-packager.svg?branch=master)](https://travis-ci.org/electron-userland/electron-packager)\n[![AppVeyor Build status](https://ci.appveyor.com/api/projects/status/m51mlf6ntd138555/branch/master?svg=true)](https://ci.appveyor.com/project/electron-userland/electron-packager)\n[![Coverage Status](https://codecov.io/gh/electron-userland/electron-packager/branch/master/graph/badge.svg)](https://codecov.io/gh/electron-userland/electron-packager)\n[![Dependency Status](https://dependencyci.com/github/electron-userland/electron-packager/badge)](https://dependencyci.com/github/electron-userland/electron-packager)\n\n[Supported Platforms](#supported-platforms) |\n[Installation](#installation) |\n[Usage](#usage) |\n[API](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md) |\n[Contributing](https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md) |\n[Support](https://github.com/electron-userland/electron-packager/blob/master/SUPPORT.md) |\n[Related Apps/Libraries](#related) |\n[FAQ](https://github.com/electron-userland/electron-packager/blob/master/docs/faq.md) |\n[Release Notes](https://github.com/electron-userland/electron-packager/blob/master/NEWS.md)\n\n----\n\n## About\n\nElectron Packager is a command line tool and Node.js library that bundles Electron-based application\nsource code with a renamed Electron executable and supporting files into folders ready for distribution.\n\nFor creating distributables like installers and Linux packages, consider using either [Electron\nForge](https://github.com/electron-userland/electron-forge) (which uses Electron Packager\ninternally), or one of the [related Electron tools](#distributable-creators), which utilizes\nElectron Packager-created folders as a basis.\n\nNote that packaged Electron applications can be relatively large. A zipped, minimal Electron\napplication is approximately the same size as the zipped prebuilt binary for a given target\nplatform, target arch, and [Electron version](https://github.com/electron/electron/releases)\n_(files named `electron-v${version}-${platform}-${arch}.zip`)_.\n\n### Electron Packager is an [OPEN Open Source Project](http://openopensource.org/)\n\nIndividuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee [CONTRIBUTING.md](https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md) and [openopensource.org](http://openopensource.org/) for more details.\n\n## Supported Platforms\n\nElectron Packager is known to run on the following **host** platforms:\n\n* Windows (32/64 bit)\n* OS X (also known as macOS)\n* Linux (x86/x86_64)\n\nIt generates executables/bundles for the following **target** platforms:\n\n* Windows (also known as `win32`, for both 32/64 bit)\n* OS X (also known as `darwin`) / [Mac App Store](http://electron.atom.io/docs/v0.36.0/tutorial/mac-app-store-submission-guide/) (also known as `mas`)<sup>*</sup>\n* Linux (for x86, x86_64, armv7l, arm64, and mips64el architectures)\n\n<sup>*</sup> *Note for OS X / MAS target bundles: the `.app` bundle can only be signed when building on a host OS X platform.*\n\n## Installation\n\nThis module requires Node.js 6.0 or higher to run.\n\n```sh\n# For use in npm scripts (recommended)\nnpm install electron-packager --save-dev\n\n# For use from the CLI\nnpm install electron-packager -g\n```\n\n### Building Windows apps from non-Windows platforms\n\nBuilding an Electron app for the Windows target platform requires editing the `Electron.exe` file.\nCurrently, Electron Packager uses [node-rcedit](https://github.com/atom/node-rcedit) to accomplish\nthis. A Windows executable is bundled in that Node package and needs to be run in order for this\nfunctionality to work, so on non-Windows host platforms, [Wine](https://www.winehq.org/) 1.6 or\nlater needs to be installed. On OS X, it is installable via [Homebrew](http://brew.sh/).\n\n## Usage\n\nJavaScript API usage can be found in the [API documentation](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md).\n\n### From the Command Line\n\nRunning electron-packager from the command line has this basic form:\n\n```\nelectron-packager <sourcedir> <appname> --platform=<platform> --arch=<arch> [optional flags...]\n```\n\nThis will:\n\n- Find or download the correct release of Electron\n- Use that version of Electron to create a app in `<out>/<appname>-<platform>-<arch>` *(this can be customized via an optional flag)*\n\n`--platform` and `--arch` can be omitted, in two cases:\n\n* If you specify `--all` instead, bundles for all valid combinations of target\n  platforms/architectures will be created.\n* Otherwise, a single bundle for the host platform/architecture will be created.\n\nFor an overview of the other optional flags, run `electron-packager --help` or see\n[usage.txt](https://github.com/electron-userland/electron-packager/blob/master/usage.txt). For\ndetailed descriptions, see the [API documentation](https://github.com/electron-userland/electron-packager/blob/master/docs/api.md).\n\nIf `appname` is omitted, this will use the name specified by \"productName\" or \"name\" in the nearest package.json.\n\n**Characters in the Electron app name which are not allowed in all target platforms' filenames\n(e.g., `/`), will be replaced by hyphens (`-`).**\n\nYou should be able to launch the app on the platform you built for. If not, check your settings and try again.\n\n**Be careful** not to include `node_modules` you don't want into your final app. If you put them in\nthe `devDependencies` section of `package.json`, by default none of the modules related to those\ndependencies will be copied in the app bundles. (This behavior can be turned off with the\n`--no-prune` flag.) In addition, folders like `.git` and `node_modules/.bin` will be ignored by\ndefault. You can use `--ignore` to ignore files and folders via a regular expression (*not* a\n[glob pattern](https://en.wikipedia.org/wiki/Glob_%28programming%29)). Examples include\n`--ignore=\\.gitignore` or `--ignore=\"\\.git(ignore|modules)\"`.\n\n#### Example\n\nLet's assume that you have made an app based on the [electron-quick-start](https://github.com/electron/electron-quick-start) repository on a OS X host platform with the following file structure:\n\n```\nfoobar\n├── package.json\n├── index.html\n├── […other files, like LICENSE…]\n└── script.js\n```\n\n…and that the following is true:\n\n* `electron-packager` is installed globally\n* `productName` in `package.json` has been set to `Foo Bar`\n* The `electron` module is in the `devDependencies` section of `package.json`, and set to the exact version of `1.4.15`.\n* `npm install` for the `Foo Bar` app has been run at least once\n\nWhen one runs the following command for the first time in the `foobar` directory:\n\n```\nelectron-packager .\n```\n\n`electron-packager` will do the following:\n\n* Use the current directory for the `sourcedir`\n* Infer the `appname` from the `productName` in `package.json`\n* Infer the `appVersion` from the `version` in `package.json`\n* Infer the `platform` and `arch` from the host, in this example, `darwin` platform and `x64` arch.\n* Download the darwin x64 build of Electron 1.4.15 (and cache the downloads in `~/.electron`)\n* Build the OS X `Foo Bar.app`\n* Place `Foo Bar.app` in `foobar/Foo Bar-darwin-x64/` (since an `out` directory was not specified, it used the current working directory)\n\nThe file structure now looks like:\n\n```\nfoobar\n├── Foo Bar-darwin-x64\n│   ├── Foo Bar.app\n│   │   └── […Mac app contents…]\n│   ├── LICENSE\n│   └── version\n├── […other application bundles, like \"Foo Bar-win32-x64\" (sans quotes)…]\n├── package.json\n├── index.html\n├── […other files, like LICENSE…]\n└── script.js\n```\n\nThe `Foo Bar.app` folder generated can be executed by a system running OS X, which will start the packaged Electron app. This is also true of the Windows x64 build on a system running a new enough version of Windows for a 64-bit system (via `Foo Bar-win32-x64/Foo Bar.exe`), and so on.\n\n## Related\n\n- [Electron Forge](https://github.com/electron-userland/electron-forge) - creates, builds, and distributes modern Electron applications\n- [electron-packager-interactive](https://github.com/Urucas/electron-packager-interactive) - an interactive CLI for electron-packager\n- [grunt-electron](https://github.com/sindresorhus/grunt-electron) - grunt plugin for electron-packager\n\n### Distributable Creators\n\n* [electron-installer-zip](https://github.com/electron-userland/electron-installer-zip) - creates symlink-compatible ZIP files\n\nWindows:\n\n* [electron-winstaller](https://github.com/electron/windows-installer) - Squirrel.Windows-based installer from the Electron maintainers group\n* [electron-windows-store](https://github.com/felixrieseberg/electron-windows-store) - creates an AppX package for the Windows Store\n* [electron-wix-msi](https://github.com/felixrieseberg/electron-wix-msi) - creates traditional MSI installers\n* [electron-installer-windows](https://github.com/electron-userland/electron-installer-windows) - alternative Squirrel.Windows-based installer\n\nOS X:\n\n* [electron-installer-dmg](https://github.com/electron-userland/electron-installer-dmg) - creates a DMG\n\nLinux:\n\n* [electron-installer-debian](https://github.com/electron-userland/electron-installer-debian) - creates a DEB file\n* [electron-installer-redhat](https://github.com/electron-userland/electron-installer-redhat) - creates an RPM\n* [electron-installer-flatpak](https://github.com/endlessm/electron-installer-flatpak) - creates a Flatpak file\n* [electron-installer-snap](https://github.com/electron-userland/electron-installer-snap) - creates a Snap file\n\n### Plugins\n\nThese Node modules utilize Electron Packager API hooks:\n\n- [electron-packager-languages](https://npm.im/electron-packager-languages) - set the locales\n  available to Electron when packaged, which is used by the Mac App Store, among other places\n- [electron-packager-plugin-non-proprietary-codecs-ffmpeg](https://www.npmjs.com/package/electron-packager-plugin-non-proprietary-codecs-ffmpeg) - replaces the normal version of FFmpeg in Electron with a version without proprietary codecs\n- [electron-rebuild](https://github.com/electron/electron-rebuild) - rebuild native Node.js modules\n  against the packaged Electron version\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron-userland/electron-packager.git"
  },
  "scripts": {
    "codecov": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "lint": "eslint .",
    "test": "npm run lint && nyc ava test/index.js"
  },
  "version": "13.0.0"
}
